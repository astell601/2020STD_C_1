// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 문제 25-1 [C언어의 메모리 구조]
/* 아래의 예제를 컴파일하고 실행하는 경우, 프로그램 시작부터 종료 시까지 스택의 상태변화에 대해서 설명해보자. 

void func2(int n)
{
	int num3 = n + 1;
}
void func1(int n)
{
	int num2 = n + 1;
	func2(num2);
}

int main(void)
{
	int num1 = 20;
	func1(num1);
	return 0;
}

지역변수와 매개변수가 스택에 어떠한 순서대로 쌓이고 또 어떠한 순서대로 소멸되는지를 중심으로 설명하면 된다. */

/* main -> func1 -> func2의 순으로 함수가 호출되므로,
main 함수의 지역변수 num1이 먼저 할당되고 이어서 func1 함수의 매개변수 n과 지역변수 num2가 할당된다.
그리고 마지막으로 func2 함수가 호출되면서 func2 함수의 매개변수 n과 지역변수 num3가 할당된다.

반면, 호출된 함수는 func2 -> func1 -> main 순으로 반환이 되므로, 첫 번째로 func2 함수의 매개변수 n과 지역변수 num3이 소멸된다.
두 번째로 func1 함수의 매개변수 n과 지역변수 num2가 소멸되며 세 번째로 main 함수의 지역변수 num1이 소멸된다.*/

/*

// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 25-2; 메모리의 동적 할당
// C_p.542_ReadStringFault.c

#include <stdio.h>

char* ReadUserName(void)
{
	char name[30];
	printf("What's your name? ");
	gets(name);
	return name;
}

int main(void)
{
	char* name1;
	char* name2;
	name1 = ReadUserName();
	printf("name1 : %s \n", name1);
	name2 = ReadUserName();
	printf("name2 : %s \n", name2);
	return 0;
}

*/

/*

// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 25-2; 메모리의 동적 할당
// C_p.543_ReadStringFault2.c

#include <stdio.h>
char name[30];

char* ReadUserName(void)
{
	printf("What's your name? ");
	gets(name);
	return name;
}

int main(void)
{
	char* name1;
	char* name2;
	name1 = ReadUserName();
	printf("name1 : %s \n", name1);
	name2 = ReadUserName();
	printf("name2 : %s \n", name2);

	printf("name1 : %s \n", name1);
	printf("name2 : %s \n", name2);
	return 0;
}

*/

/*

// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 25-2; 메모리의 동적 할당
// C_p.546_DynamicMemoryAllocation.c

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	int* ptr1 = (int*)malloc(sizeof(int));
	int* ptr2 = (int*)malloc(sizeof(int) * 7);
	int i;

	*ptr1 = 20;
	for (i = 0;i < 7;i++)
		ptr2[i] = i + 1;

	printf("%d \n", *ptr1);
	for (i = 0;i < 7;i++)
		printf("%d ", ptr2[i]);

	free(ptr1);
	free(ptr2);
	return 0;
}

*/

/*

// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 25-2; 메모리의 동적 할당
// C_p.548_ReadStringRight.c

#include <stdio.h>
#include <stdlib.h>

char* ReadUserName(void)
{
	char* name = (char*)malloc(sizeof(char) * 30);
	printf("What's your name? ");
	gets(name);
	return name;
}

int main(void)
{
	char* name1;
	char* name2;
	name1 = ReadUserName();
	printf("name1 : %s \n", name1);
	name2 = ReadUserName();
	printf("name2 : %s \n", name2);

	printf("again name1 : %s \n", name1);
	printf("again name2 : %s \n", name2);
	free(name1);
	free(name2);
	return 0;
}

*/

/*

// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 문제 25-2 [메모리 공간의 동적 할당]
// C_p.551_Question.1

프로그램 사용자로부터 문자열을 입력 받아서 입력 받은 문자열의 단어를 역으로 출력하는 프로그램을 작성해보자.
예를 들어서 "I am a boy"가 입력되면, 다음의 출력을 보여야 한다. "boy a am I"

단, 문자열의 입력에 앞서 프로그램 사용자가 입력할 문자열의 최대길이 정보를 먼저 입력받기로 하자.
그리고 그 길이만큼 메모리 공간을 동적으로 할당해서 문자열을 입력 받기로 하자.


#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
	int maxlen, len, i;
	char* str;
	printf("문자열의 최대 길이 입력 : ");
	scanf_s("%d", &maxlen);
	getchar();
	str = (char*)malloc(sizeof(char) * (maxlen + 1));

	printf("문자열 입력 : ");
	fgets(str, maxlen + 1, stdin);
	str[strlen(str) - 1] = 0;
	len = strlen(str);
	
	for (i = len;i > 0;i--)
	{
		if (str[i] == ' ')
		{
			printf("%s ", &str[i + 1]);
			str[i] = 0;
		}
	}
	printf("%s", &str[0]);
	free(str);
	return 0;
}

*/

/*

// Chapter 25 : 메모리 관리와 메모리의 동적 할당
// 문제 25-2 [메모리 공간의 동적 할당]
// C_p.551_Question.2

프로그램 사용자로부터 정수를 입력 받는다. -1이 입력될 때까지 계속해서 입력받아서,
프로그램 종료 직전에 입력 받은 정수 전부를 순서대로 출력하는 프로그램을 작성해 보자.

그런데 이 문제의 핵심은 프로그램 사용자가 몇 개의 정수를 입력할지 모른다는데 있다.
그래서 이 문제의 해결을 위해서 힙 영역을 사용하기로 하겠다.
일단은 길이가 5인 int형 배열을 힙에 할당하자. 그리고 배열이 꽉 찰 때마다 길이를 3씩 늘리도록 하자.
이 떄 앞서 소개한 realloc 함수를 이용하면 상대적으로 쉽게 배열의 길이를 늘릴 수 있다.

#include <stdio.h>
#include <stdlib.h>

int main()
{
	int arrlen = 5;
	int idx = 0;
	int i;
	int* arr = (int*)malloc(sizeof(int) * arrlen);

	while(1)
	{
		printf("정수 입력 : ");
		scanf_s("%d", &arr[idx]);
		if (arr[idx] == -1)
			break;

		if (arrlen == idx + 1)
		{
			arrlen += 3;
			arr = (int*)realloc(arr, sizeof(int) * arrlen);
		}
		idx++;
	}
	for (i = 0;i < idx;i++)
		printf("%d ", arr[i]);
	free(arr);
	return 0;
}

*/
